Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.
docker images --no-trunc

5. Create a container of your image 
docker run f0b8a9a54136

6. List all the running containers
docker ps

7. List all the running and stopped containers
docker ps -aq


8. Find out the "Full" containerId of the container and write it below.
docker ps --no-trunc

9. Find out how many image layers are used to build this image.
docker history nginx

10. Get the Apache Tomcat 7 server image from the docker hub.
docker pull tomcat:7.0

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
docker run tomcat:7.0

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
docker inspect --format '{{.NetworkSettings.IPAddress}}' 7eeb3a93108f

13. Which Port it is using?
docker inspect --format '{{.NetworkSettings.Ports}}' 7eeb3a93108f

14. Try to access the Tomcat's home page from your machine/vm.
docker image pull tomcat:8.0
docker image ls
docker container create --publish 8082:8080 --name my-tomcat-container tomcat:8.0
docker container start my-tomcat-container
my-tomcat-container

15. What is the disk size of Apache Tomcat image?
docker system df -v

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
docker exec 0d9f51ccb409 env

17. Find out which port is exposed for tomcat?
docker port FROM ubuntu
RUN apt-get update
RUN apt-get -y install apache2
ADD . /var/www/html
ENTRYPOINT apachectl -D FOREGROUND
ENV name DevOps Neha
------------------------------------------------------
FROM is used to define base image, on which we will be building.
ADD - ADD<source><destination in container> -used to add files to the container being built.
RUN is used to add layers to the base image, by installing components. Each RUN statement adds new layer to the docker image.
CMD is used to run commands on the start of the container. These commands run only when there is no arguement specified while running the container.
ENTRYPOINT is used strictly run commands the moment the container initializes.
ENV is used to define environment variables in the container run-time.

18. Run multiple conntainers of tomcat on different port and access it's home page.
docker run -d -p 8888:8080 tomcat:7.0

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
docker pull ubuntu:xenial-20210416
docker pull ubuntu:rolling

20. Run the container of ubuntu in attached mode.
docker run -it ubuntu:xenial-20210416

21. Run the container of another ubuntu in detached mode.
docker run -d ubuntu:rolling

22. Check how many ubuntu containers are running and stopped
docker ps 

23. Is the tomcat container running? If no, start one.
docker run tomcat:7.0

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
docker logs FROM ubuntu
RUN apt-get update
RUN apt-get -y install apache2
ADD . /var/www/html
ENTRYPOINT apachectl -D FOREGROUND
ENV name DevOps Supriya
------------------------------------------------------
FROM is used to define base image, on which we will be building.
ADD - ADD<source><destination in container> -used to add files to the container being built.
RUN is used to add layers to the base image, by installing components. Each RUN statement adds new layer to the docker image.
CMD is used to run commands on the start of the container. These commands run only when there is no arguement specified while running the container.
ENTRYPOINT is used strictly run commands the moment the container initializes.
ENV is used to define environment variables in the container run-time.

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
docker run -it ubuntu:xenial

26. Login as root user in ubuntu container
docker exec -u 0 e5b26681bad0 whoami

27. Create a file with any name in root directory
docker exec -it e5b26681bad0 bash
touch file.txt

28. Install software of your choice in ubuntu container using "apt-get install"
apt-get update
apt-get install nano


29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
exit

30. Check if the ubuntu container is running.
docker ps

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
docker run -it aefd7f02ae24 (image id of ubuntu:xenial)

32. Login as a root user
docker exec -it (container-id) bash

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
docker kill 00640739dfe6

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
yes i have previous ubuntu container

35. Create an Image out of the existing container.
docker run --name my_ubuntu ubuntu:xenial

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
docker run -it my_ubuntu bash

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
docker stop e5a28945928c
docker kill e5a28945928c

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
C:\Users\DELL>docker run -d -p 9787:8080 tomcat:8.0
C:\Users\DELL>docker exec -it e5a28945928c  bash
root@e5a28945928c:/usr/local/tomcat# ls
root@e5a28945928c:/usr/local/tomcat# cd webapps
root@e5a28945928c:/usr/local/tomcat/webapps# cd ROOT
root@e5a28945928c:/usr/local/tomcat/webapps/ROOT# echo "<h1>This is Tomcat Container </h1>" > index.html
root@e5a28945928c:/usr/local/tomcat/webapps/ROOT# cat index.html
<h1>This is Tomcat Container </h1>
Go to browser and use localhost:9787 it will show output as This is Tomcat Container.

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
docker images -a

2. -f
docker images -f --no-trunc

3. -q
docker images -q

write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-

write atleast 1 command using each option above and prove their concepts as described in the --help.

1. -a
docker ps -a [-a, --all This will show all containers (default shows just running)]

2. -f
docker ps -f "name=nginx" [-f, --filter This will filter out based on conditions]

3. -q
docker ps -q [-q, --quiet only displays container ID's]

4. -n
docker ps -n [-n, --last int This will show last created containers]

5. -l
docker ps -l [-l, --latest This will show latest created containers]

6. -s
docker ps -s [-s, --size It will Display total file sizes]



41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".

It consist of options that can be used with docker like image,volume,node,swarm.

Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
docker cp img:/var/home  [Copy files/folders between a container and the local filesystem]

2. create
docker create -it ubuntu bash [Create a new container]

3. export
docker export ubuntu1 > latest.tar [Export a container's filesystem as a tar archive]

4. history
docker history ubuntu [Show the history of an image]

5. info
docker info  [Display system-wide information]

6. login
docker login localhost:8080 [Log in to a Docker registry]

7. logout
docker logout localhost:8080 [Log out to a Docker registry]

8. rename
docker rename ubuntu1 myimg  [Rename a container]

9. save
docker save myimg [Save one or more images to a tar archive (streamed to STDOUT by default)]

10. stats
docker stats [Display a live stream of container(s) resource usage statistics]

11. top
docker top container [Display the running processes of a container]


42. Kill all running container in one liner command.
docker container kill $(docker ps -q)

43. Delete all images in one liner command.
docker rmi $(docker images -a -q)

44. Create a simple Dockerfile, build it and run it.
vim Dockerfile
docker build -t myimage
docker run -p 8800:8080 myimage


45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
1. USER
2. RUN
3. ENV
4. CMD
5. RUN
6. ENTRYPOINT
7. EXPOSE
8. VOLUME

FROM ubuntu
RUN apt-get update
RUN apt-get -y install apache2
ADD . /var/www/html
ENTRYPOINT apachectl -D FOREGROUND
ENV name DevOps Supriya
------------------------------------------------------
FROM is used to define base image, on which we will be building.
ADD - ADD<source><destination in container> -used to add files to the container being built.
RUN is used to add layers to the base image, by installing components. Each RUN statement adds new layer to the docker image.
CMD is used to run commands on the start of the container. These commands run only when there is no arguement specified while running the container.
ENTRYPOINT is used strictly run commands the moment the container initializes.
ENV is used to define environment variables in the container run-time.
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.

C:\Users\DELL>docker pull ubuntu
C:\Users\DELL>docker run -it --name myimage ubuntu
	root@a611eef449b5:/# apt-get update
	root@a611eef449b5:/# apt-get install curl
	root@a611eef449b5:/# which nginx
	root@a611eef449b5:/# apt-get install curl
	root@a611eef449b5:/# service nginx start
	root@a611eef449b5:/# exit
docker commmit mynginx supriya15/myimage
docker images
docker login docker push supriya15/myimage
	



